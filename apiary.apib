HOST: http://localhost/yamj3/

--- YAMJ v3 ---

---
# Information on the API in use by YAMJ

This is the API for YAMJ.

Please log an issue on the GitHub Issue list if you find any problems, or want to request and additional API or change to an API.


***
The API can be called using the following base URL:
`http://{CORE_IP}/yamj3/`

`{CORE_IP}` is the address of where your jetty install is running, usually you can use `localhost`, but you can also look in the system info page on the YAMJ web pages.

## JSON & JSONP
If you require JSONP formatted data, you can call the URL and append the following:

    .json?callback={function}
**Example**

    http://localhost:8888/yamj3/api/video/1.json?callback={function}
## Using the API documentation

The documentation describes the way that the API can be called, along with an example of the data returned.

The URL provided is the base URL for calling that particular API.

Next will be listed some required parameters, all of which must be provided for the API to work.

Optional parameters can be provided, if required, to modify the results returned.

### Adding parameters to the URL
The first parameter that you add to the URL must be preceded by `?`, each subsequent parameter is preceded by `&`

**Example**

    http://localhost:8888/yamj3/api/video/list?start=0&max=5
This adds the `start=0` parameter first and then `max=5` second. The `=` separates the parameter name from the value.

***

# Using paging for results

In most methods of the API you can use paging parameters to control the amount of data received back and effectively page through the results.

There are two ways to do this. The first way is to use the `start` and `max` parameters:
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>start</td>
        <td>Where to start the result list from. Default is 0, the beginning</td>
    </tr>
    <tr>
        <td>max</td>
        <td>Maximum number of results to return. <br>
        Note: The actual number of results returned may be less than the max parameter, indicating that you are at the end of the result list</td>
    </tr>
</table>

An alternative way to page through the results is using the `page`, `line`, `perpage` & `perline` parameters.
This way of paging through the results assumes that you know the layout of a "page" for the skin.
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>page</td>
        <td>The page number of the results that are wanted.</td>
    </tr>
    <tr>
        <td>line</td>
        <td>The line number on the page for the results that are wanted</td>
    </tr>
    <tr>
        <td>perpage</td>
        <td>How many entries per page</td>
    </tr>
    <tr>
        <td>perline</td>
        <td>How many entries per line</td>
    </tr>
</table>

These are translated into `start` and `max` using the following methodology:

    start = ( (page - 1) * perpage ) + ( (line - 1) * perline )

    if line is set (i.e. >0)
        max = perline
    else
        max = perpage
    otherwise
        max = default (no limit)
Methods that can use paging will be marked in the documentation.

**Only one of these methods should be used**

***

# Sorting the results
If the API method supports it, the results can be sorted using a simple asceding or descending sort.
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>sortby</td>
        <td>The field to sort on.<br>
        This is the name of the field in the database.</td>
    </tr>
    <tr>
        <td>sortdir</td>
        <td>The direction of the sorting. Can be either 'ASC' or 'DESC'</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genres?sortby=name&sortdir=desc`

***

# Searching the results
If the API method supports it, the results can be searched on a specific field of the results.
This will limit the results returned to those matching that criteria.
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>field</td>
        <td>The name of the field to search on<br>
        This is the name of the field in the database.</td>
    </tr>
    <tr>
        <td>search</td>
        <td>The text to search for.<br>
        Should be appropriate for the field being searched on.<br>
        Searching on text for a numeric field will return no results!</td>
    </tr>
    <tr>
        <td>mode</td>
        <td>The mode of the search, i.e. where should the text be searched for in the field?<br>
        Can be one of:<br>
        <table width="100%">
            <col width="15%">
            <col width="85%">
            <tr>
                <td>ANY</td>
                <td>This is the default and will match anywhere in the field</td>
            </tr>
            <tr>
                <td>START</td>
                <td>Match only at the start of the field</td>
            </tr>
            <tr>
                <td>END</td>
                <td>Match only at the end of the field</td>
            </tr>
            <tr>
                <td>EXACT</td>
                <td>Match the whole field exactly</td>
            </tr>
        </table>
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genres?field=name&search=a`

__Note__: The search is case ___insensitive___.

***

---

--
Index Methods
This section is for the index API methods
--


Get an index of videos.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The list of video types to get.<br/>
            Can be a comma separated list consisting one or more of:<br>
           'all', 'movie', 'series', 'season' or 'episode'<br>
           If left blank, will default to 'all'.
        </td>
    </tr>
</table>

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>include</td>
        <td>Comma delimited list of fields & values to include.<br/>
            Example: include=year-2010,genre-Action<br/>
            Valid includes are: year, genre, studio, country, award, certification, videosource, resolution, rating, newest, boxset, library
        </td>
    </tr>
    <tr>
        <td>exclude</td>
        <td>Comma delimited list of fields & values to exclude.<br/>
            Example: exclude=year-2012,genre-Thriller<br/>
            Valid excludes are: year, genre, studio, country, award, certification, videosource, resolution, rating, newest, boxset, library
        </td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the videos.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Leave this option blank to return no artwork</td>
    </tr>
    <tr>
        <td>watched</td>
        <td>If just watched or unwatched videos should be selected.<br/>
            Use 'watched=true' to select just watched videos.<br/>
            Use 'watched=false' to select just unwatched videos.
        </td>
    </tr>
    <tr>
        <td>yearStart</td>
        <td>Get just videos from this and later years.</td>
    </tr>
    <tr>
        <td>yearEnd</td>
        <td>Get just videos from this and previous years.</td>
    </tr>
    <tr>
        <td>PAGING</td>
        <td>See above for the explanation on paging parameters.</td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters.</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/index/video?max=2`

GET /api/index/video
< 200
< Content-Type: application/json
{
   "count":2,
   "totalCount":13,
   "queryDuration":"107ms",
   "queryTime":"2013-07-31 16:18:12",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":2,
      "sortdir":"ASC",
      "artwork":"POSTER",
   },
   "baseArtworkUrl":"http://141.196.102.114:8888/artwork/",
   "baseMediainfoUrl":"http://141.196.102.114:8888/mediainfo/",
   "results":[
      {
         "id":1,
         "videoType":"SEASON",
         "title":"Game of Thrones",
         "originalTitle":"Game of Thrones",
         "videoYear":2011,
         "genres":[],
         "artwork":{
            "POSTER":[
               {
                  "source":"SEASON",
                  "videoId":1,
                  "artworkId":1,
                  "locatedId":1,
                  "generatedId":1,
                  "artworkType":"POSTER",
                  "filename":"g/ga/Game of Thrones_0000.series.poster.1.default-poster.jpg"
               },
               {
                  "source":"SEASON",
                  "videoId":1,
                  "artworkId":1,
                  "locatedId":2,
                  "generatedId":2,
                  "artworkType":"POSTER",
                  "filename":"g/ga/Game of Thrones_0000.series.poster.2.default-poster.jpg"
               }
            ]
         },
         "artworkCount":2,
         "genreCount":0
      }
   ]
}


Get an index of people.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>dataitems</td>
        <td>This is a list of additional data items to append to add to the results.<br/>
            Valid options are: artwork, biography.
        </td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the index.<br/>
            Currently only 'PHOTO' is supported for this index.<br/>
            Note: This is used in conjunction with the dataitem "artwork".</td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters.</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters.</td>
    </tr>
    <tr>
        <td>PAGING</td>
        <td>See above for the explanation on paging parameters.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/index/person?max=3`

GET /api/index/person
< 200
< Content-Type: application/json
{
   "count":3,
   "totalCount":110,
   "queryDuration":"31ms",
   "queryTime":"2013-08-01 10:56:42",
   "status":{
      "status":200,
      "message":"OK"
   },
   "options":{
      "start":-1,
      "max":3,
      "sortby":"",
      "sortdir":"ASC",
      "id":-1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "results":[
      {
         "id":1,
         "name":"Zachary Levi",
         "biography":"Zachary Levi Pugh (born September 29, 1980), better known by his stage name Zachary Levi, ...",
         "birthDay":"1980-09-29",
         "birthPlace":"Lake Charles, Louisiana, USA",
      },
      {
         "id":2,
         "name":"Yvonne Strahovski",
         "biography":"Yvonne Strahovski (born Strzechowski on 30 July 1982) is an Australian actress. Born in Australia ...",
         "birthDay":"1982-07-30",
         "birthPlace":"Sydney, Australia",
      },
      {
         "id":3,
         "name":"Joshua Gomez",
         "biography":"Joshua Eli Gomez (born November 20, 1975, in Bayonne, New Jersey) is an American actor ...",
         "birthDay":"1975-11-20",
         "birthPlace":"Bayonne, New Jersey, USA",
      }
   ]
}


Get counts for various main objects in the database.
Note: These are currently fixed and are intended for system wide statistics.
For specific indexes, there will be an option to get the count for that index.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the count to get.<br/>
            Can be a comma separated list consisting one or more of:<br>
           'all', 'movie', 'series', 'season', 'episode' or 'person'<br>
           If left blank, will default to 'all'.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/index/count?type=all`

GET /api/index/count
< 200
< Content-Type: application/json
{
  [
    {
      "type":"MOVIE",
      "count":730,
      "createTimestamp":1372626565000,
      "updateTimestamp":1372785055000,
      "lastId":877
    },
    {
      "type":"SERIES",
      "count":6,
      "createTimestamp":1372626159000,
      "updateTimestamp":1372785325000,
      "lastId":6
    },
    {
      "type":"SEASON",
      "count":10,
      "createTimestamp":1372626160000,
      "updateTimestamp":1372785325000,
      "lastId":10
    },
    {
      "type":"EPISODE",
      "count":147,
      "createTimestamp":1372626160000,
      "updateTimestamp":1372785325000,
      "lastId":549
    },
    {
      "type":"PERSON",
      "count":9175,
      "createTimestamp":1372785318000,
      "updateTimestamp":1372795950000,
      "lastId":9175
    }
  ]
}


Get a list of jobs and their associated counts.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>job</td>
        <td>A comma separated list of the jobs to get counts for.<br/>
            If left blank, will default to 'all'
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/index/jobs?job=actor,writer,director`

GET /api/index/jobs
< 200
< Content-Type: application/json
{
  [
   {
      "item":"ACTOR",
      "count":11693
   },
   {
      "item":"ART",
      "count":606
   },
   {
      "item":"CAMERA",
      "count":358
   },
   {
      "item":"COSTUME_MAKEUP",
      "count":215
   },
   {
      "item":"CREW",
      "count":223
   },
   {
      "item":"DIRECTOR",
      "count":843
   },
   {
      "item":"EDITING",
      "count":509
   },
   {
      "item":"EFFECTS",
      "count":132
   },
   {
      "item":"GUEST_STAR",
      "count":360
   },
   {
      "item":"LIGHTING",
      "count":19
   },
   {
      "item":"PRODUCER",
      "count":2400
   },
   {
      "item":"SOUND",
      "count":569
   },
   {
      "item":"WRITER",
      "count":1532
   }
  ]
}


Get an alphabetical list of the first characters in a type list.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the list to get.<br/>
            Can be a comma separated list consisting one or more of:<br>
           'all', 'movie', 'series', 'season', 'episode' or 'person'<br>
           If left blank, will default to 'all'.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/alphabetical/list?type=movie`

GET /api/alphabetical/list
< 200
< Content-Type: application/json
{
    "count": 25,
    "totalCount": 25,
    "queryDuration": "64ms",
    "queryTime": "2015-05-13 11:05:34 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "type": "movie"
    },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "results": [
        {
            "name": "3"
        },
        {
            "name": "A"
        },
        {
            "name": "B"
        },
        {
            "name": "C"
        }
    ]
}


--
Video Methods
These methods get information on the videos in the database.
--

Get or update information for a video (movie/series/season).
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the video.<br/>
            Valid types are: movie, season, series, episode (just update)
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The id of the movie to get or update.<br/>
            Note: This is specific to the video type, so Movie ID 1 is not the same as Season ID 1.
        </td>
    </tr>
</table>

**GET request - Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>dataitems</td>
        <td>This is a list of additional data items to append to the results.<br/>
            Valid options are: plot, outline, quote, tagline, status, artwork, files, genre, studio, country, certification, rating, award, externalid, boxset, trailer, jobs
        </td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the video.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Leave this option blank to return no artwork
        </td>
    </tr>
</table>

**PUT request - JSON document in Request Body**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>title</td>
        <td>The title of the video; optional</td>
    </tr>
    <tr>
        <td>titleOriginal</td>
        <td>The original title of the video; optional</td>
    </tr>
    <tr>
        <td>plot</td>
        <td>The plot of the video; optional</td>
    </tr>
    <tr>
        <td>outline</td>
        <td>The outline of the video; optional</td>
    </tr>
    <tr>
        <td>tagline</td>
        <td>The tagline of the video; optional; just movie/episode</td>
    </tr>
    <tr>
        <td>quote</td>
        <td>The quote of the video; optional; just movie/episode</td>
    </tr>
    <tr>
        <td>publicationYear</td>
        <td>The publication year of the video; optional; just movie/season</td>
    </tr>
    <tr>
        <td>startYear</td>
        <td>The start year of the video; optional; just series</td>
    </tr>
    <tr>
        <td>endYear</td>
        <td>The end year of the video; optional; just series</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/movie/2?dataitems=plot,artwork,files,genre&artwork=all`

GET /api/video/{type}/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"496ms",
   "queryTime":"2014-01-14 15:16:48",
   "status":{
      "status":200,
      "message":"OK"
   },
   "options":{
      "start":-1,
      "max":-1,
      "language":null,
      "sortby":"",
      "sortdir":"ASC",
      "field":"",
      "search":"",
      "mode":"",
      "dataitems":[
         "artwork",
         "files",
         "genre"
      ],
      "id":2,
      "artwork":"ALL",
      "type":"MOVIE",
      "include":"",
      "exclude":""
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "basePhotoUrl":"http://192.168.1.34:8888/photo/",
   "result":{
      "id":2,
      "videoType":"MOVIE",
      "title":"Avatar",
      "originalTitle":"Avatar",
      "videoYear":2009,
      "genres":[
         {
            "id":1,
            "name":"Adventure"
         },
         {
            "id":2,
            "name":"Action"
         },
         {
            "id":4,
            "name":"Science Fiction"
         },
         {
            "id":5,
            "name":"Fantasy"
         }
      ],
      "artwork":{
         "POSTER":[
            {
               "id":2,
               "source":"MOVIE",
               "artworkId":8,
               "locatedId":0,
               "generatedId":0,
               "artworkType":"POSTER",
               "filename":""
            }
         ],
         "FANART":[
            {
               "id":2,
               "source":"MOVIE",
               "artworkId":9,
               "locatedId":0,
               "generatedId":0,
               "artworkType":"FANART",
               "filename":""
            }
         ]
      },
      "files":[
         {
            "id":2,
            "filename":"C:\\Projects\\YAMJv3\\testdir\\Avatar (2009).avi",
            "season":-1,
            "episode":-1
         }
      ],
      "outline":null,
      "plot":null,
      "country":null,
      "quote":null,
      "tagline":null,
      "topRank":null,
      "seriesId":-1,
      "seasonId":null,
      "season":-1,
      "episode":-1,
      "artworkCount":2,
      "genreCount":4
   }
}

PUT /api/video/{type}/{id}
> Content-Type: application/json
{
    "title":"Avatar - Aufbruch nach Pandora",
}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Updated video with ID 2"
}


Retrieve information on a specific series.

Will get all the seasons associated with the series.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The id of the series to get.</td>
    </tr>
</table>

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>dataitems</td>
        <td>This is a list of additional data items to append to add to the results.<br/>
            Valid options are: plot, outline, genre, studio, country, certification, rating, award, artwork</td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the list.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Note: This is used in conjunction with the dataitem "artwork".</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/seriesinfo?id=1`

GET /api/video/seriesinfo?id={id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"149ms",
   "queryTime":"2013-09-05 13:15:05",
   "status":{
      "status":200,
      "message":"OK"
   },
   "options":{
      "start":-1,
      "max":-1,
      "sortby":"",
      "sortdir":"ASC",
      "field":"",
      "search":"",
      "mode":"",
      "dataitems":[
         "artwork"
      ],
      "id":1,
      "artwork":"POSTER"
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "basePhotoUrl":"http://192.168.1.34:8888/photo/",
   "results":[
      {
         "seriesId":1,
         "title":"Chuck",
         "year":2007,
         "seasonList":[
            {
               "seriesId":1,
               "seasonId":1,
               "season":1,
               "title":"Chuck",
               "artwork":{
                  "POSTER":[
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":58,
                        "generatedId":58,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.58.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":59,
                        "generatedId":59,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.59.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":60,
                        "generatedId":60,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.60.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":61,
                        "generatedId":61,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.61.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":62,
                        "generatedId":62,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.62.default-poster.jpg"
                     }
                  ]
               },
               "artworkCount":5
            },
            {
               "seriesId":1,
               "seasonId":2,
               "season":2,
               "title":"Chuck",
               "artwork":{
                  "POSTER":[
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":58,
                        "generatedId":58,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.58.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":59,
                        "generatedId":59,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.59.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":60,
                        "generatedId":60,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.60.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":61,
                        "generatedId":61,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.61.default-poster.jpg"
                     },
                     {
                        "source":"SEASON",
                        "sourceId":1,
                        "artworkId":46,
                        "locatedId":62,
                        "generatedId":62,
                        "artworkType":"POSTER",
                        "filename":"c/ch/Chuck_0000_001.season.poster.62.default-poster.jpg"
                     }
                  ]
               },
               "artworkCount":5
            }
         ],
         "artwork":{
            "POSTER":[
               {
                  "source":"SERIES",
                  "sourceId":1,
                  "artworkId":43,
                  "locatedId":43,
                  "generatedId":43,
                  "artworkType":"POSTER",
                  "filename":"c/ch/Chuck_0000.series.poster.43.default-poster.jpg"
               },
               {
                  "source":"SERIES",
                  "sourceId":1,
                  "artworkId":43,
                  "locatedId":44,
                  "generatedId":44,
                  "artworkType":"POSTER",
                  "filename":"c/ch/Chuck_0000.series.poster.44.default-poster.jpg"
               },
               {
                  "source":"SERIES",
                  "sourceId":1,
                  "artworkId":43,
                  "locatedId":45,
                  "generatedId":45,
                  "artworkType":"POSTER",
                  "filename":"c/ch/Chuck_0000.series.poster.45.default-poster.jpg"
               },
               {
                  "source":"SERIES",
                  "sourceId":1,
                  "artworkId":43,
                  "locatedId":46,
                  "generatedId":46,
                  "artworkType":"POSTER",
                  "filename":"c/ch/Chuck_0000.series.poster.46.default-poster.jpg"
               },
               {
                  "source":"SERIES",
                  "sourceId":1,
                  "artworkId":43,
                  "locatedId":47,
                  "generatedId":47,
                  "artworkType":"POSTER",
                  "filename":"c/ch/Chuck_0000.series.poster.47.default-poster.jpg"
               }
            ]
         },
         "artworkCount":5
      }
   ]
}

Retrieve information on the TV episodes.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>seriesid</td>
        <td>The ID of the series to get.<br>
        Leave blank to get all series.</td>
    </tr>
    <tr>
        <td>seasonid</td>
        <td>The ID of the season to get.<br>
        Leave blank to get all seasons.</td>
    </tr>
    <tr>
        <td>season</td>
        <td>The season number from the series to get.<br>
        Leave blank to get all seasons.</td>
    </tr>
    <tr>
        <td>dataitems</td>
        <td>This is a list of additional data items to append to add to the results.<br/>
            Valid options are: plot, outline, files, genre, country, studio, certification, award, rating, jobs
        </td>
    </tr>
    <tr>
        <td>watched</td>
        <td>If just watched or unwatched episodes should be selected.</td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/episodes?dataitems=files,plot,outline&seriesid=3`

GET /api/video/episodes
< 200
< Content-Type: application/json
{
   "count":6,
   "totalCount":6,
   "queryDuration":"492ms",
   "queryTime":"2014-01-14 15:39:03",
   "status":{
      "status":200,
      "message":"OK"
   },
   "options":{
      "start":-1,
      "max":-1,
      "language":null,
      "sortby":"",
      "sortdir":"ASC",
      "field":"",
      "search":"",
      "mode":"",
      "dataitems":[
         "files",
         "artwork",
         "outline",
         "plot"
      ],
      "seriesid":3,
      "seasonid":-1,
      "season":-1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "basePhotoUrl":"http://192.168.1.34:8888/photo/",
   "results":[
      {
         "seriesId":3,
         "seasonId":4,
         "season":1,
         "episode":1,
         "episodeId":5,
         "title":"Pilot (1)",
         "outline":null,
         "plot":"Stripped of everything, the 48 survivors scavenge what they can from the plane for their survival.",
         "filename":"C:\\Projects\\YAMJv3\\testdir\\Lost S01E01.avi",
         "videoimage":"l/lo/Lost_0000_001_001.episode.videoimage.115.default-videoimage.jpg"
      },
      {
         "seriesId":3,
         "seasonId":4,
         "season":1,
         "episode":2,
         "episodeId":6,
         "title":"Pilot (2)",
         "outline":null,
         "plot":"Having escaped the \"creature\" and retrieved the plane transceiver, a group of the survivors travel to higher ground.",
         "filename":"C:\\Projects\\YAMJv3\\testdir\\Lost S01E02.avi",
         "videoimage":"l/lo/Lost_0000_001_002.episode.videoimage.117.default-videoimage.jpg"
      },
      {
         "seriesId":3,
         "seasonId":4,
         "season":1,
         "episode":3,
         "episodeId":7,
         "title":"Tabula Rasa",
         "outline":null,
         "plot":"Jack and Hurley discover an alarming secret about Kate, as the marshal's life hangs in the balance.",
         "filename":"C:\\Projects\\YAMJv3\\testdir\\Lost S01E03.avi",
         "videoimage":"l/lo/Lost_0000_001_003.episode.videoimage.116.default-videoimage.jpg"
      },
      {
         "seriesId":3,
         "seasonId":3,
         "season":2,
         "episode":1,
         "episodeId":4,
         "title":"Man of Science, Man of Faith",
         "outline":null,
         "plot":"Jack, Locke and Kate explore the mysterious hatch but Jack decides to wait before going down into the hatch.",
         "filename":"C:\\Projects\\YAMJv3\\testdir\\Lost S02E01.avi",
         "videoimage":"l/lo/Lost_0000_002_001.episode.videoimage.108.default-videoimage.jpg"
      },
      {
         "seriesId":3,
         "seasonId":3,
         "season":2,
         "episode":2,
         "episodeId":8,
         "title":"Adrift",
         "outline":null,
         "plot":"With the abduction of Walt fresh on their minds, their raft destroyed, and Jin missing, Michael and Sawyer fight for their lives.",
         "filename":"C:\\Projects\\YAMJv3\\testdir\\Lost S02E02.avi",
         "videoimage":"l/lo/Lost_0000_002_002.episode.videoimage.114.default-videoimage.jpg"
      },
      {
         "seriesId":3,
         "seasonId":3,
         "season":2,
         "episode":3,
         "episodeId":9,
         "title":"Orientation",
         "outline":null,
         "plot":"Jack, Locke and Kate learn more secrets about the hatch.",
         "filename":"C:\\Projects\\YAMJv3\\testdir\\Lost S02E03.avi",
         "videoimage":"l/lo/Lost_0000_002_003.episode.videoimage.118.default-videoimage.jpg"
      }
   ]
}


Add or Update an external ID for a video ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the video.<br/>
            Valid types are: movie, season, series, episode
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The Video ID of the video to add/update the external ID for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database of the external ID.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
    <tr>
        <td>externalid</td>
        <td>The External ID to add/update to.<br/>
            This should be the full ID from the source site, e.g. tt123456.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/movie/updateexternalid?id=81&sourcedb=imdb&externalid=tt123456`

PUT /api/video/{type}/updateexternalid?id={}&sourcedb={}&externalid={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Updated external ID for imdb for movie ID 81"
}


Remove an external ID for a video ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the video.<br/>
            Valid types are: movie, season, series, episode
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The Video ID of the video to remove the external ID for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database of the external ID.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/movie/removeexternalid?id=81&sourcedb=imdb`

PUT /api/video/{type}/removeexternalid?id={}&sourcedb={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Removed external ID for imdb for movie ID 81"
}


Enabled online scan for a video ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the video.<br/>
            Valid types are: movie, series
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The Video ID of the video to enable online scan for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database for online scanning.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/movie/enableonlinescan?id=81&sourcedb=tmdb`

PUT /api/video/{type}/enableonlinescan?id={}&sourcedb={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Enabled tmdb scan for movie ID: 81"
}


Disable online scan for a video ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the video.<br/>
            Valid types are: movie, series
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The Video ID of the video to disable online scan for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database for online scanning.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/movie/disableonlinescan?id=81&sourcedb=tmdb`

PUT /api/video/{type}/disableonlinescan?id={}&sourcedb={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Disabled tmdb scan for movie ID: 81"
}


Get a list of present years.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the list to get.<br/>
            Can be a comma separated list consisting one or more of:<br>
           'all', 'movie', 'series', 'season' or 'episode'<br>
           If left blank, will default to 'all'.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/years/list?type=movie`

GET /api/video/years/list
< 200
< Content-Type: application/json
{
    "count": 4,
    "totalCount": 4,
    "queryDuration": "267ms",
    "queryTime": "2015-12-07 11:11:00 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "type": "movie"
    },
    "baseArtworkUrl": "http:///192.168.0.20:8888:8888/artwork/",
    "baseMediainfoUrl": "http:///192.168.0.20:8888:8888/mediainfo/",
    "basePhotoUrl": "http:///192.168.0.20:8888:8888/photo/",
    "baseTrailerUrl": "http:///192.168.0.20:8888:8888/trailer/",
    "results": [
        {
            "year": 1999
        },
        {
            "year": 2009
        },
        {
            "year": 2010
        },
        {
            "year": 2013
        }
    ]
}


Get a list of present decades.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the list to get.<br/>
            Can be a comma separated list consisting one or more of:<br>
           'all', 'movie', 'series', 'season' or 'episode'<br>
           If left blank, will default to 'all'.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/video/decades/list?type=movie`

GET /api/video/decades/list
< 200
< Content-Type: application/json
{
    "count": 3,
    "totalCount": 3,
    "queryDuration": "266ms",
    "queryTime": "2015-12-07 11:12:40 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "type": "movie"
    },
    "baseArtworkUrl": "http:///192.168.0.20:8888:8888/artwork/",
    "baseMediainfoUrl": "http:///192.168.0.20:8888:8888/mediainfo/",
    "basePhotoUrl": "http:///192.168.0.20:8888:8888/photo/",
    "baseTrailerUrl": "http:///192.168.0.20:8888:8888/trailer/",
    "results": [
        {
            "decade": 1990
        },
        {
            "decade": 2000
        },
        {
            "decade": 2010
        }
    ]
}


--
Artwork
--

Get information on the artwork.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>This is the ID of the artwork to fetch.<br>
        It will retrieve all the artwork generated for that ID</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/artwork/1`

GET /api/artwork/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"6ms",
   "queryTime":"2013-07-31 09:12:07",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "result":{
      "source":"SEASON",
      "videoId":1,
      "artworkId":5,
      "locatedId":21,
      "generatedId":21,
      "artworkType":"FANART",
      "filename":"g/ga/Game of Thrones_0000_001.season.fanart.21.default-fanart.jpg"
   }
}

Get a list of artwork.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>artwork</td>
        <td>The type of artwork to search for. Can be a comma delimited list of any of the artwork types.</td>
    </tr>
    <tr>
        <td>video</td>
        <td>The type of video to search for. Can be one of video, series, season. <br>
        Can be used in conjunction with the id parameter to narrow the artwork list to a specific video.</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The id of the video/series/season to search for.</td>
    </tr>
    <tr>
        <td>start</td>
        <td>Where to start the search from. Default is 0 (beginning)</td>
    </tr>
    <tr>
        <td>max</td>
        <td>The maximum number of records to return. Default is 0 (all)</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/artwork/list`

GET /api/artwork/list
< 200
< Content-Type: application/json
{
   "count":5,
   "totalCount":199,
   "queryDuration":"63ms",
   "queryTime":"2013-07-31 09:09:50",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":5,
      "artwork":[],
      "video":[],
      "id":-1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "results":[
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":1,
         "generatedId":1,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.1.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":2,
         "generatedId":2,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.2.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":3,
         "generatedId":3,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.3.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":4,
         "generatedId":4,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.4.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":5,
         "generatedId":5,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.5.default-poster.jpg"
      }
   ]
}


Get a list of artwork profiles
***

__Example__: `http://localhost:8888/yamj3/api/artwork/profiles`

GET /api/artwork/profiles
< 200
< Content-Type: application/json
{
    "count": 5,
    "totalCount": 5,
    "queryDuration": "1ms",
    "queryTime": "2016-02-11 14:51:45 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": null,
    "baseArtworkUrl": "http://10.0.36.13:8888/artwork/",
    "baseMediainfoUrl": "http://10.0.36.13:8888/mediainfo/",
    "basePhotoUrl": "http://10.0.36.13:8888/photo/",
    "baseTrailerUrl": "http://10.0.36.13:8888/trailer/",
    "results": [
        {
            "id": 3,
            "name": "default-banner",
            "artworkType": "BANNER",
            "width": 650,
            "height": 120,
            "applyTo": [
                "SERIES",
                "SEASON",
                "BOXSET"
            ],
            "preProcess": true,
            "normalize": true,
            "stretch": false,
            "reflection": false,
            "roundedCorners": false
        },
        {
            "id": 1,
            "name": "default-fanart",
            "artworkType": "FANART",
            "width": 1280,
            "height": 720,
            "applyTo": [
                "MOVIE",
                "SERIES",
                "SEASON",
                "BOXSET"
            ],
            "preProcess": true,
            "normalize": true,
            "stretch": false,
            "reflection": false,
            "roundedCorners": false
        },
        {
            "id": 5,
            "name": "default-photo",
            "artworkType": "PHOTO",
            "width": 200,
            "height": 300,
            "applyTo": [
                "PERSON"
            ],
            "preProcess": true,
            "normalize": true,
            "stretch": false,
            "reflection": false,
            "roundedCorners": false
        },
        {
            "id": 2,
            "name": "default-poster",
            "artworkType": "POSTER",
            "width": 224,
            "height": 332,
            "applyTo": [
                "MOVIE",
                "SERIES",
                "SEASON",
                "BOXSET"
            ],
            "preProcess": true,
            "normalize": true,
            "stretch": false,
            "reflection": false,
            "roundedCorners": false
        },
        {
            "id": 4,
            "name": "default-videoimage",
            "artworkType": "VIDEOIMAGE",
            "width": 400,
            "height": 225,
            "applyTo": [
                "EPISODE"
            ],
            "preProcess": true,
            "normalize": true,
            "stretch": false,
            "reflection": false,
            "roundedCorners": false
        }
    ]
}

Regenerate images for an artwork profile.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>This is the ID of artwork profile.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/artwork/regenerate/2`

GET /api/artwork/regenerate/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Trigger regeneration of 32 images"
}


Ignore a located artwork.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>This is the ID of the located artwork.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/artwork/ignore/15`

PUT /api/artwork/located/ignore/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully marked located artwork '15' as ignored"
}


Add an image to a defined artwork for a choosen video type.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>artwork</td>
        <td>The artwork type: poster, banner, fanart, videoimage</td>
    </tr>
    <tr>
        <td>type</td>
        <td>The video type: movies, series, season, episode, person, boxset</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the choosen type; i.e. the movie ID.</td>
    </tr>
    <tr>
        <td>image</td>
        <td>The artwork image as multipart image file.</td>
    </tr>
</table>

POST /api/artwork/add/{artwork}/{type}/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Cached image as '/a/av/Avatar.movie.13819.poster.jpg'"
}

Get image of a located artwork for a name profile. 
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>profile</td>
        <td>The profile name which must exist.</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of located artwork.</td>
    </tr>
</table>

GET /api/artwork/get/{profile}/{id}
< 200
< Content-Type: image/jpg

--
Person
--


Get or update information on the person.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>This is the ID of the person.</td>
    </tr>
</table>

**GET request - Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>dataitems</td>
        <td>This is a list of additional data items to append to add to the results.<br>
        Valid options are: artwork, biography, externalid, filmography_inside, filmography_scanned</td>
    </tr>
</table>

**PUT request - JSON document in Request Body**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>name</td>
        <td>The full name of the person; optional</td
    </tr>
    <tr>
        <td>firstName</td>
        <td>The first name of the person; optional</td
    </tr>
    <tr>
        <td>lastName</td>
        <td>The last name of the person; optional</td
    </tr>
    <tr>
        <td>birthName</td>
        <td>The birth name of the person; optional</td
    </tr>
    <tr>
        <td>birthDay</td>
        <td>The birth day of the person; optional</td
    </tr>
    <tr>
        <td>birthPlace</td>
        <td>The birth place of the person; optional</td
    </tr>
    <tr>
        <td>deathDay</td>
        <td>The death day of the person; optional</td
    </tr>
    <tr>
        <td>deathPlace</td>
        <td>The death place of the person; optional</td
    </tr>
    <tr>
        <td>biography</td>
        <td>The biography of the person; optional</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/59`

GET /api/person/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"15ms",
   "queryTime":"2013-08-01 11:08:58",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "options":{
      "start":-1,
      "max":-1,
      "sortby":"",
      "sortdir":"ASC",
      "id":1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "basePhotoUrl":"http://192.168.1.34:8888/photo/",
   "result":{
      "id":59,
      "name":"Zachary Levi",
      "biography":"Zachary Levi Pugh (born September 29, 1980), better known by his stage name Zachary Levi ...",
      "birthDay":"1980-09-29",
      "birthPlace":"Lake Charles, Louisiana, USA",
      "birthName":null,
      "deathDay":null
   }
}

PUT /api/person/{id}
> Content-Type: application/json
{
    "firstName":"Zachary Levi",
    "lastName":"Pugh"
}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Updated person with ID 59"
}


Get a list of cast and crew for a video.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type: movies, series, season, episode</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the choosen type; i.e. the movie ID.</td>
    </tr>
</table>

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>job</td>
        <td>Comma separated list of jobs to restrict the list to.</td>
    </tr>
    <tr>
        <td>dataitems</td>
        <td>Comma separated list of additional data items to add to the results.<br>
            Valid items are: artwork, biography.
        </td>
    </tr>
    <tr>
        <td>PAGING</td>
        <td>See above for the explanation on paging parameters</td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/movie?id=1&job=actor&max=2`

GET /api/person/{type}?id={}
< 200
< Content-Type: application/json
{
   "count":2,
   "totalCount":29,
   "queryDuration":"459ms",
   "queryTime":"2013-09-10 14:56:38",
   "status":{
      "status":200,
      "message":"OK"
   },
   "options":{
      "start":-1,
      "max":2,
      "sortby":"",
      "sortdir":"ASC",
      "field":"",
      "search":"",
      "mode":"",
      "dataitems":[],
      "id":1,
      "job":[
         "actor"
      ]
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "basePhotoUrl":"http://192.168.1.34:8888/photo/",
   "results":[
      {
         "id":1,
         "name":"Chris Pine",
         "biography":"Christopher Whitelaw \"Chris\" Pine (born August 26, 1980) is an American actor. He has appeared in the romantic comedies The Princess Diaries 2: Royal Engagement (2004) and Just My Luck (2006), as well as the action films Smokin' Aces (2007) and Unstoppable (2010). In 2009, he portrayed James T. Kirk in the film Star Trek.",
         "birthDay":"1980-08-26",
         "birthPlace":"Los Angeles, California, USA",
         "birthName":null,
         "deathDay":null,
         "job":"ACTOR",
         "role":"Kirk",
         "artwork":[]
      },
      {
         "id":2,
         "name":"Zachary Quinto",
         "biography":"Zachary Quinto is a american actor best known for his roles as the evil Sylar on TV's Heroes and as Spock in the Star Trek Reboot.  In 1999 Quinto graduated from Carnegie Melon's School of Drama, afterwards beginning his career as a television actor.  In 2003, he landed a recurring role on 24, appearing as a computer specialist working for CTU. Later, in 2006, he began working on Heroes, playing the evil serial killer Sylar.   In 2009 he played Spock in Star Trek, a role which he was lauded for bringing his own spin to a decades old character and a role he is set to reprise in the second film in the new series.   Like his costar Chris Pine, Zachary has taken some time to perform on stage, performing in various productions including Shakespeare's Much Ado About Nothing.  Quinto is signed up to play George Gershwin in the Steven Spielberg directed Biopic about the composer. ",
         "birthDay":"1977-06-02",
         "birthPlace":"Pittsburgh, Pennsylvania, USA",
         "birthName":null,
         "deathDay":null,
         "job":"ACTOR",
         "role":"Spock",
         "artwork":[]
      }
   ]
}


Add or update an external ID for a person ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the person to add/update the external ID for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database of the external ID.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
    <tr>
        <td>externalid</td>
        <td>The External ID to add/update to.<br/>
            This should be the full ID from the source site, e.g. tt123456.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/updateexternalid?id=12&sourcedb=imdb&externalid=nm123456`

PUT /api/person/updateexternalid?id={}&sourcedb={}&externalid={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Updated external ID for imdb for person ID 12"
}


Remove an external ID for a person ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the person to remove the external ID for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database of the external ID.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/removeexternalid?id=12&sourcedb=imdb`

PUT /api/person/removeexternalid?id={}&sourcedb={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Removed external ID for imdb for person ID 12"
}


Enable online scan for a person ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the person to enable online scan for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database for online scanning.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/enableonlinescan?id=12&sourcedb=tmdb`

PUT /api/person/enableonlinescan?id={}&sourcedb={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Enabled tmdb scan for person ID: 12"
}


Disable online scan for a person ID.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The Video ID of the person to disable online scan for.</td>
    </tr>
    <tr>
        <td>sourcedb</td>
        <td>The source database for online scanning.</br>
	        For example: imdb, tmdb, etc.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/disableonlinescan?id=12&sourcedb=tmdb`

PUT /api/person/disableonlinescan?id={}&sourcedb={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Disabled tmdb scan for person ID: 12"
}


Mark a person as duplicate of another person.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the original person.</td>
    </tr>
    <tr>
        <td>doublet</td>
        <td>The ID of the duplicate person.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/person/duplicate?id=1&doublet=2`

PUT /api/person/duplicate?id={}&doublet={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Marked 2 as duplicate of 1"
}

--
Watched
Commands to mark videos as watched and unwatched
--


Mark a video as watched.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type: movies, series, season, episode<br/>
            For a season or series all episodes will be markes as watched.
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the video to mark as watched</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/watched/movie/7`

PUT /api/watched/{type}/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Set movie id 7 to watched"
}

Mark a video as unwatched.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type: movies, series, season, episode<br/>
            For a season or series all episodes will be markes as unwatched.
        </td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the movie to mark as unwatched</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/unwatched/movie/7`

PUT /api/unwatched/{type}/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Set movie id 7 to unwatched"
}


--
Rescan
--

Rescan a meta dataobject.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The metadata type: movies, series, season, episode, person, filmography</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the metadata to rescan.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/rescan/episode/12`

PUT /api/rescan/{type}/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Rescan episode for ID: 12"
}


Rescan artwork of a metadata object.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The metadata type: movies, series, season, episode, person, boxset</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the metadata to rescan artwork for.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/rescan/episode/artwork/12`

PUT /api/rescan/{type}/artwork/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Rescan episode artwork for ID: 12"
}


Rescan trailer of a metadata object.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The metadata type: movies, series</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The ID of the metadata to rescan trailer for.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/rescan/series/trailer/19`

PUT /api/rescan/{type}/trailer/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Rescan series trailer for ID: 19"
}


Rescan all metadata and artworks.
***

__Example__: `http://localhost:8888/yamj3/api/rescan/all`

PUT /api/rescan/all
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": ""Rescan forced for all meta data objects"
}


--
Trailer
--

Delete a trailer.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the trailer.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/trailer/delete/{87}`

PUT /api/trailer/delete/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Set status DELETED for trailer ID: 87"
}

Ignore a trailer.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the trailer.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/trailer/ignore/{87}`

PUT /api/trailer/ignore/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Set status IGNORED for trailer ID: 87"
}

Download a trailer.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the trailer.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/trailer/download/{87}`

PUT /api/trailer/download/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Set status UPDATED for trailer ID: 87"
}


--
Genres
--


Get information on a single genre.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id_or_name</td>
        <td>The ID or name of the genre to get</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genre/1`

GET /api/genre/{id_or_name}
< 200
< Content-Type: application/json
{
   "count":1,
   "queryTime":"2013-06-08 19:04:34",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "parameters":{}
   },
   "result":{
      "id":1,
      "name":"Foreign"
   }
}


Get information on the genres associated with a filename.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>filename</td>
        <td>The filename to get the list of genres for</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genre?filename=Avatar%20(2009).avi`

GET /api/genre
< 200
< Content-Type: application/json
{
   "count":4,
   "totalCount":4,
   "queryDuration":"78ms",
   "queryTime":"2013-07-29 21:51:24",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
   "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
   "basePhotoUrl": "http://192.168.0.20:8888/photo/",
   "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
   "results":[
      {
         "id":1,
         "name":"Science Fiction"
      },
      {
         "id":2,
         "name":"Adventure"
      },
      {
         "id":3,
         "name":"Action"
      },
      {
         "id":4,
         "name":"Thriller"
      }
   ]
}


Get information genres.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>used</td>
        <td>Set to false to get all genres instead just used genres.<br/>
            Default value: true
        </td>
    </tr>
    <tr>
        <td>full</td>
        <td>Set to get genre target informations also.<br/>
            Default value: false
        </td>
    </tr>
    <tr>
        <td>type</td>
        <td>The video type to get genres for.<br/>
            May be just movie or series
        </td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genres/list`

GET /api/genres/list
< 200
< Content-Type: application/json
{
   "count":4,
   "queryTime":"2013-06-08 19:06:12",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "parameters":{
         "SEARCH":"d",
         "SEARCH_FIELD":"name",
         "MATCHMODE":"any",
         "SORT_FIELD":"name"
      }
   },
   "results":[
      {
         "id":9,
         "name":"Adventure"
      },
      {
         "id":2,
         "name":"Comedy"
      },
      {
         "id":3,
         "name":"Drama"
      },
      {
         "id":5,
         "name":"Holiday"
      }
   ]
}


Add a genre withe a defined genre target.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>name</td>
        <td>The name of the genre.</td>
    </tr>
    <tr>
        <td>target</td>
        <td>The target of the genre; how it's displayed in the genres list of videos.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genres/add?name=Sci-Fi&target=Science-Fiction`

POST /api/genres/add?name={}&target={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully added genre 'Sci-Fi' with target 'Science-Fiction'"
}


Update a genre withe a defined genre target.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id_or_name</td>
        <td>The ID or name of the genre.</td>
    </tr>
    <tr>
        <td>target</td>
        <td>The target of the genre.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/genres/add?name=Sci-Fi&target=Science+Fiction`

POST /api/genres/update?id_or_name={}&target={}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully updated genre 'Sci-Fi' with target 'Science Fiction'"
}


--
Studios
--


Get information on a single studio.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id_or_name</td>
        <td>The ID or name of the studio to get</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/studio/163`

GET /api/studio/{id_or_name}
< 200
< Content-Type: application/json
{
    "count": 1,
    "totalCount": 1,
    "queryDuration": "323ms",
    "queryTime": "2015-12-07 14:24:06 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": null,
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "result": {
        "id": 163,
        "name": "Lightstorm Entertainment"
    }
}


Get information studios.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>used</td>
        <td>Set to false to get all studios instead just used studios.<br/>
            Default value: true
        </td>
    </tr>
    <tr>
        <td>type</td>
        <td>The video type to get genres for.<br/>
            May be just movie or series
        </td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/studios/list?type=movie`

GET /api/studios/list
< 200
< Content-Type: application/json
{
    "count": 11,
    "totalCount": 11,
    "queryDuration": "0ms",
    "queryTime": "2015-12-07 14:27:30 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": { },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "id": 2,
            "name": "20th Century Fox"
        },
        {
            "id": 11,
            "name": "Appian Way"
        },
        {
            "id": 3,
            "name": "Dune Entertainment"
        },
        {
            "id": 9,
            "name": "EMJAG Productions"
        },
        {
            "id": 4,
            "name": "Ingenious Film Partners"
        },
        {
            "id": 1,
            "name": "Lightstorm Entertainment"
        },
        {
            "id": 13,
            "name": "Lucasfilm"
        },
        {
            "id": 7,
            "name": "Paramount Pictures"
        },
        {
            "id": 8,
            "name": "Red Granite Pictures"
        },
        {
            "id": 10,
            "name": "Sikelia Productions"
        },
        {
            "id": 5,
            "name": "Universal Pictures"
        }
    ]
}


--
Countries
--


Get information on a single country.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>countryCode</td>
        <td>The countryCode of the county</td>
    </tr>
</table>

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>language</td>
        <td>the language code to use for translating the country name.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/country/US?language=en`

GET /api/country/{countryCode}
< 200
< Content-Type: application/json
{
    "count": 1,
    "totalCount": 1,
    "queryDuration": "235ms",
    "queryTime": "2015-12-07 14:42:25 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": null,
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "result": {
        "id": 1,
        "countryCode": "US",
        "country": "United States"
    }
}


Get information on the countries associated with a filename.
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>filename</td>
        <td>The filename to get the list of genres for</td>
    </tr>
</table>

**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>language</td>
        <td>the language code to use for translating the country name.</td>
    </tr>
</table>
__Example__: `http://localhost:8888/yamj3/api/country?filename=Avatar%20(2009).avi`

GET /api/country?filename={}
< 200
< Content-Type: application/json
{
    "count": 1,
    "totalCount": 1,
    "queryDuration": "235ms",
    "queryTime": "2015-12-07 14:42:25 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": null,
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "id": 1,
            "countryCode": "US",
            "country": "United States"
        },
        {
            "id": 49,
            "countryCode": "DE",
            "country": "Germany"
        },
    ]
}


Get information countries.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type to get countries for.<br/>
            May be just movie or series
        </td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/countries/list?type=movie`

GET /api/countries/list
< 200
< Content-Type: application/json
{
    "count": 2,
    "totalCount": 2,
    "queryDuration": "327ms",
    "queryTime": "2015-12-07 14:49:15 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "type": "MOVIE"
    },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "id": 2,
            "countryCode": "GB",
            "country": "Vereinigtes Königreich"
        },
        {
            "id": 1,
            "countryCode": "US",
            "country": "Vereinigte Staaten von Amerika"
        }
    ]
}



--
Other
--


Get information certifications.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type to get certifications for.<br/>
            May be just movie or series
        </td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/certifications/list?type=movie`

GET /api/certifications/list
< 200
< Content-Type: application/json
{
    "count": 7,
    "totalCount": 7,
    "queryDuration": "267ms",
    "queryTime": "2015-12-07 14:53:16 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "type": "MOVIE"
    },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "id": 5,
            "countryCode": "DE",
            "country": "Deutschland",
            "certificate": "0"
        },
        {
            "id": 1,
            "countryCode": "DE",
            "country": "Deutschland",
            "certificate": "12"
        },
        {
            "id": 8,
            "countryCode": "DE",
            "country": "Deutschland",
            "certificate": "16"
        },
        {
            "id": 11,
            "countryCode": "DE",
            "country": "Deutschland",
            "certificate": "6"
        },
        {
            "id": 6,
            "countryCode": "US",
            "country": "Vereinigte Staaten von Amerika",
            "certificate": "PG"
        },
        {
            "id": 3,
            "countryCode": "US",
            "country": "Vereinigte Staaten von Amerika",
            "certificate": "PG-13"
        },
        {
            "id": 10,
            "countryCode": "US",
            "country": "Vereinigte Staaten von Amerika",
            "certificate": "R"
        }
    ]
}


Get information awards.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type to get awards for.<br/>
            May be just movie or series
        </td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/awards/list`

GET /api/awards/list
< 200
< Content-Type: application/json
{
    "count": 0,
    "totalCount": 0,
    "queryDuration": "266ms",
    "queryTime": "2015-12-07 14:54:47 +0100",
    "status": {
        "status": 400,
        "message": "No records found"
    },
    "options": { },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [ ]
}


Get information video sources.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type to get video sources for.<br/>
            May be just movie or series
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/videosources/list`

GET /api/videosources/list
< 200
< Content-Type: application/json
{
    "count": 2,
    "totalCount": 2,
    "queryDuration": "281ms",
    "queryTime": "2015-12-07 14:57:53 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": { },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "name": "BluRay"
        },
        {
            "name": "SDTV"
        }
    ]
}


Get list of libraries.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type to get libraries for that type  sources for.<br/>
            May be just movie, series, season, episode
        </td>
    </tr>
	 <tr>
        <td>SORTING</td>
		<td>See above for the explanation on sorting parameters</td>
        <td>to get sorted<br/>
            May be base_directory, client, lastscanned
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/libraries/list`

GET /api/libraries/list
< 200
< Content-Type: application/json
{
    "options": {},
    "baseArtworkUrl": "http://192.168.1.8:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.1.8:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.1.8:8888/photo/",
    "baseTrailerUrl": "http://192.168.1.8:8888/trailer/",
    "count": 3,
    "totalCount": 3,
    "queryDuration": "2ms",
    "queryTime": "2017-06-05 00:00:24 +0200",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "results": [
        {
            "id": 1,
            "client": "FileScanner",
            "playerPath": "",
            "baseDirectory": "T:/video/Film",
            "lastScanned": "2017-05-30",
            "name": "T:/video/Film"
        },
        {
            "id": 2,
            "client": "FileScanner",
            "playerPath": " ",
            "baseDirectory": "U:/video",
            "lastScanned": "2017-06-01",
            "name": "U:/video"
        },
        {
            "id": 8,
            "client": "FileScanner",
            "playerPath": "",
            "baseDirectory": "U:/Film_test/Series",
            "lastScanned": "2017-05-31",
            "name": "U:/Film_test/Series"
        }
    ]
}

Get information of a library.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The id of a library</td>
		<td>or path</td>
        <td>path a library<br/>
				should be enclode by quote
		</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/library/1`

GET /api/libraries/list
< 200
< Content-Type: application/json
{
    "options": null,
    "baseArtworkUrl": "http://192.168.1.8:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.1.8:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.1.8:8888/photo/",
    "baseTrailerUrl": "http://192.168.1.8:8888/trailer/",
    "count": 1,
    "totalCount": 1,
    "queryDuration": "8ms",
    "queryTime": "2017-06-05 00:10:22 +0200",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "result": {
        "id": 1,
        "client": "FileScanner",
        "playerPath": "",
        "baseDirectory": "T:/video/Film",
        "lastScanned": 1496104322000,
        "name": "T:/video/Film"
    }
}

Get information ratings.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The video type to get video sources for.<br/>
            May be just movie or series
        </td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/ratings/list`

GET /api/ratings/list
< 200
< Content-Type: application/json
{
    "count": 10,
    "totalCount": 10,
    "queryDuration": "274ms",
    "queryTime": "2015-12-07 15:01:39 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": { },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "type": "MOVIE",
            "source": "combined",
            "rating": 6
        },
        {
            "type": "MOVIE",
            "source": "combined",
            "rating": 7
        },
        {
            "type": "MOVIE",
            "source": "combined",
            "rating": 8
        },
        {
            "type": "MOVIE",
            "source": "imdb",
            "rating": 7
        },
        {
            "type": "MOVIE",
            "source": "imdb",
            "rating": 8
        },
        {
            "type": "MOVIE",
            "source": "tmdb",
            "rating": 6
        },
        {
            "type": "MOVIE",
            "source": "tmdb",
            "rating": 7
        },
        {
            "type": "MOVIE",
            "source": "tmdb",
            "rating": 8
        },
        {
            "type": "SERIES",
            "source": "combined",
            "rating": 9
        },
        {
            "type": "SERIES",
            "source": "tvdb",
            "rating": 9
        }
    ]
}

Get information on a single boxed set
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the boxed set to get</td>
    </tr>
</table>

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>dataitems</td>
        <td>Comma separated list of additional data items to add to the results.<br>
            Valid items are: member, artwork, plot, outline
        </td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The artwork type: poster, banner, fanart, videoimage<br/>
            If left empty then all artworks will be returned.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/boxset/12?dataitems=member`

GET /api/boxset/{id}
< 200
< Content-Type: application/json
{
    "count": 1,
    "totalCount": 1,
    "queryDuration": "297ms",
    "queryTime": "2015-12-07 15:13:27 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "dataitems": [
            "member"
        ],
        "id": 12
    },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "result": {
        "id": 12,
        "name": "Star Wars",
        "memberCount": 1,
        "watched": false,
        "members": [
            {
                "id": 6,
                "videoType": "MOVIE",
                "ordering": -1,
                "title": "Star Wars: Episode I - Die dunkle Bedrohung",
                "originalTitle": "Star Wars: Episode I - The Phantom Menace",
                "year": 1999,
                "releaseDate": "1999-08-19",
                "watched": false
            }
        ]
    }
}


Get information boxed sets.
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>dataitems</td>
        <td>Comma separated list of additional data items to add to the results.<br>
            Valid items are: artwork
        </td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The artwork type: poster, banner, fanart, videoimage<br/>
            If left empty then all artworks will be returned.
        </td>
    </tr>
    <tr>
        <td>watched</td>
        <td>If just watched or unwatched boxed sets should be selected.<br/>
            Use 'watched=true' to select just watched  boxed sets.<br/>
            Use 'watched=false' to select just unwatched  boxed sets.
        </td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/boxset/list`

GET /api/boxset/list
< 200
< Content-Type: application/json
{
    "count": 2,
    "totalCount": 2,
    "queryDuration": "0ms",
    "queryTime": "2015-12-07 15:21:04 +0100",
    "status": {
        "status": 200,
        "message": "OK"
    },
    "options": {
        "dataitems": [
            "artwork"
        ]
    },
    "baseArtworkUrl": "http://192.168.0.20:8888/artwork/",
    "baseMediainfoUrl": "http://192.168.0.20:8888/mediainfo/",
    "basePhotoUrl": "http://192.168.0.20:8888/photo/",
    "baseTrailerUrl": "http://192.168.0.20:8888/trailer/",
    "results": [
        {
            "id": 1,
            "name": "Star Wars",
            "memberCount": 1,
            "watched": false
        },
        {
            "id": 2,
            "name": "l'etage",
            "memberCount": 1,
            "watched": false
        }
    ]
}


--
Staging
--


Mark a stage file as deleted.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the stage file.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/file/delete/1`

GET /api/file/delete/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully marked file '1' as deleted"
}


Mark a stage file as updated.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the stage file.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/file/update/1`

GET /api/file/update/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully marked file '1' as updated"
}


Mark a stage file as watched.
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the stage file.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/file/watched/2`

GET /api/file/watched/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully marked file '2' as watched"
}


Mark a stage file as unwatched.
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the stage file.</td>
    </tr>
</table>
__Example__: `http://localhost:8888/yamj3/api/file/unwatched/2`

GET /api/file/unwatched/{id}
< 200
< Content-Type: application/json
{
    "status": 200,
    "message": "Successfully marked file '2' as unwatched"
}


--
Configuration
This API is for the retrieval and update of the configuration entries.
--

Get information on the configuration settings
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>config</td>
        <td>The specific configuration entry to get information on.<br/>
        Note: This is a short cut to using the search parameters. <br/>
        It is the equivalent of '?search={config}&field=config_key&mode=exact'
        </td>
    </tr>
    <tr>
        <td>SEARCHING</td>
        <td>See above for the explanation on searching parameters</td>
    </tr>
    <tr>
        <td>SORTING</td>
        <td>See above for the explanation on sorting parameters</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/config/list?config=language&mode=any`

GET /api/config/list
< 200
< Content-Type: application/json
{
   "count":3,
   "totalCount":3,
   "queryDuration":"449ms",
   "queryTime":"2013-10-29 11:28:15",
   "status":{
      "status":200,
      "message":"OK"
   },
   "options":{
      "start":-1,
      "max":-1,
      "language":null,
      "sortby":"",
      "sortdir":"ASC",
      "field":"config_key",
      "search":"language",
      "mode":"any",
      "dataitems":[]
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "basePhotoUrl":"http://192.168.1.34:8888/photo/",
   "results":[
      {
         "key":"thetvdb.language.alternate",
         "value":"",
         "createTimestamp":1382959495000,
         "updateTimestamp":null
      },
      {
         "key":"themoviedb.language",
         "value":"en",
         "createTimestamp":1382959495000,
         "updateTimestamp":null
      },
      {
         "key":"thetvdb.language",
         "value":"en",
         "createTimestamp":1382959496000,
         "updateTimestamp":null
      }
   ]
}


Add a new configuration entry
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>key</td>
        <td>The property key to set.<br/>
        This should not contain spaces, words should be delimited by periods (.)</td>
    </tr>
    <tr>
        <td>value</td>
        <td>The value of the property to set.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/config/add?key=skin.language&value=en`

POST /api/config/add
< 200
< Content-Type: application/json
{
    status: 200,
    message: "Successfully added 'skin.language' with value 'en'"
}


Update a configuration entry
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>key</td>
        <td>The property key to update.</td>
    </tr>
    <tr>
        <td>value</td>
        <td>The new value of the property to set.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/config/update?key=skin.language&value=en`

PUT /api/config/update
< 200
< Content-Type: application/json
{
    status: 200,
    message: "Successfully updated 'skin.language' with value 'en'"
}


Delete a configuration entry
***

**Required Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>key</td>
        <td>The property key to delete.</td>
    </tr>
</table>

__Example__: `http://localhost:8888/yamj3/api/config/delete?key=skin.language`

DELETE /api/config/delete
< 200
< Content-Type: application/json
{
    status: 200,
    message: "Successfully deleted 'skin.language'"
}


--
System Information
This API returns information about the state of the YAMJ Core.
--

Get a simple text response with the uptime of the core.

This is not intended to be consumed programmatically, it is intended to provide a "ping" types response for checking that the core is running.
GET /system
< 200
< Content-Type: text
{YAMJ v3 is running, uptime 1h07m20.198s}


Get information on the system
***

**Optional Parameters**
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>addcounts</td>
        <td>set to 'true' if you want a count of the major objects in the database, such as Movies, People, etc.</td>
    </tr>
</table>

GET /system/info
< 200
< Content-Type: application/json
{
   "projectName":"Yet Another Movie Jukebox",
   "projectVersion":"3.0-SNAPSHOT",
   "moduleName":"YAMJ3 Core",
   "moduleDescription":"Core of YAMJ project",
   "buildRevision":"a78abfc3c4",
   "processorCores":8,
   "javaVersion":"1.7.0_25",
   "osArch":"amd64",
   "osName":"Windows 7",
   "osVersion":"6.1",
   "counts":{
      "MOVIE":730,
      "SERIES":6,
      "SEASON":10,
      "EPISODE":147,
      "PERSON":9175
   },
   "uptime":"21m15.046s",
   "startUpTime":"2013-07-03 18:31:39",
   "buildDate":"2013-07-03 18:30:51"
}