HOST: http://localhost/yamj3/

--- YAMJ v3 ---

---
## Information on the API in use by YAMJ

This is the API for YAMJ.

Please log an issue on the GitHub Issue list if you find any problems, or want to request and additional API or change to an API.


***
The API can be called using the following base URL:
`http://{CORE_IP}/yamj3/`

`{CORE_IP}` is the address of where your jetty install is running, usually you can use `localhost`, but you can also look in the system info page on the YAMJ web pages.

## JSON & JSONP
If you require JSONP formatted data, you can call the URL and append the following:

    .json?callback={function}
**Example**

    http://localhost:8888/yamj3/api/video/1.json?callback={function}
## Using the API documentation

The documentation describes the way that the API can be called, along with an example of the data returned.

The URL provided is the base URL for calling that particular API.

Next will be listed some required parameters, all of which must be provided for the API to work.

Optional parameters can be provided, if required, to modify the results returned.

### Adding parameters to the URL
The first parameter that you add to the URL must be preceded by `?`, each subsequent parameter is preceded by `&`

**Example**

    http://localhost:8888/yamj3/api/video/list?start=0&max=5
This adds the `start=0` parameter first and then `max=5` second. The `=` separates the parameter name from the value.

## Using paging for results

In most methods of the API you can use paging parameters to control the amount of data received back and effectively page through the results.

There are two ways to do this. The first way is to use the `start` and `max` parameters:
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>start</td>
        <td>Where to start the result list from. Default is 0, the beginning</td>
    </tr>
    <tr>
        <td>max</td>
        <td>Maximum number of results to return. <br>
        Note: The actual number of results returned may be less than the max parameter, indicating that you are at the end of the result list</td>
    </tr>
</table>

An alternative way to page through the results is using the `page`, `line`, `perpage` & `perline` parameters.
This way of paging through the results assumes that you know the layout of a "page" for the skin.
<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>page</td>
        <td>The page number of the results that are wanted.</td>
    </tr>
    <tr>
        <td>line</td>
        <td>The line number on the page for the results that are wanted</td>
    </tr>
    <tr>
        <td>perpage</td>
        <td>How many entries per page</td>
    </tr>
    <tr>
        <td>perline</td>
        <td>How many entries per line</td>
    </tr>
</table>

These are translated into `start` and `max` using the following methodology:

    start = ( (page - 1) * perpage ) + ( (line - 1) * perline )

    if line is set (i.e. >0)
        max = perline
    else
        max = perpage
    otherwise
        max = default (no limit)
Methods that can use paging will be marked in the documentation.

**Only one of these methods should be used**

---

--
Index Methods
This section is for the index API methods
--

Get an index of videos.
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The list of video types to get.<br/>
            Can be one or more of: 'ALL', 'MOVIE', 'SERIES' or 'SEASON'.<br/>
            Leave this option blank to return all types</td>
    </tr>
</table>

**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>include</td>
        <td>Comma delimited list of fields & values to include<br/>
        Currently 'year' and 'genre' are supported using this format:<br/>
        include=year-2010,genre-Action
        </td>
    </tr>
    <tr>
        <td>exclude</td>
        <td>Comma delimited list of fields & values to exclude<br/>
        Currently 'year' and 'genre' are supported using this format:<br/>
        include=year-2010,genre-Action
        </td>
    </tr>
    <tr>
        <td>sortby</td>
        <td>The field to sort by. One of the valid output fields.</td>
    </tr>
    <tr>
        <td>sortdir</td>
        <td>The direction of the sorting, can be 'asc' or 'desc'</td>
    </tr>
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the videos.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Leave this option blank to return no artwork</td>
    </tr>
    <tr>
        <td>PAGING</td>
        <td>See above for the explanation on paging parameters</td>
    </tr>
</table>

GET /api/index/video
< 200
< Content-Type: application/json
{
   "count":2,
   "totalCount":13,
   "queryDuration":"107ms",
   "queryTime":"2013-07-31 16:18:12",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":2,
      "type":"",
      "include":"",
      "exclude":"",
      "sortby":"",
      "sortdir":"ASC",
      "artwork":"POSTER",
      "id":-1
   },
   "baseArtworkUrl":"http://141.196.102.114:8888/artwork/",
   "baseMediainfoUrl":"http://141.196.102.114:8888/mediainfo/",
   "results":[
      {
         "id":1,
         "videoType":"SEASON",
         "title":"Game of Thrones",
         "originalTitle":"Game of Thrones",
         "videoYear":2011,
         "genres":[],
         "artwork":{
            "POSTER":[
               {
                  "source":"SEASON",
                  "videoId":1,
                  "artworkId":1,
                  "locatedId":1,
                  "generatedId":1,
                  "artworkType":"POSTER",
                  "filename":"g/ga/Game of Thrones_0000.series.poster.1.default-poster.jpg"
               },
               {
                  "source":"SEASON",
                  "videoId":1,
                  "artworkId":1,
                  "locatedId":2,
                  "generatedId":2,
                  "artworkType":"POSTER",
                  "filename":"g/ga/Game of Thrones_0000.series.poster.2.default-poster.jpg"
               }
            ]
         },
         "artworkCount":2,
         "genreCount":0
      },
      {
         "id":1,
         "videoType":"SERIES",
         "title":"Game of Thrones",
         "originalTitle":"Game of Thrones",
         "videoYear":2011,
         "genres":[],
         "artwork":{
            "POSTER":[
               {
                  "source":"SERIES",
                  "videoId":1,
                  "artworkId":1,
                  "locatedId":1,
                  "generatedId":1,
                  "artworkType":"POSTER",
                  "filename":"g/ga/Game of Thrones_0000.series.poster.1.default-poster.jpg"
               },
               {
                  "source":"SERIES",
                  "videoId":1,
                  "artworkId":1,
                  "locatedId":2,
                  "generatedId":2,
                  "artworkType":"POSTER",
                  "filename":"g/ga/Game of Thrones_0000.series.poster.2.default-poster.jpg"
               }
            ]
         },
         "artworkCount":2,
         "genreCount":0
      }
   ]
}


Get an index of people.
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>sortby</td>
        <td>The field to sort by. One of the valid output fields.</td>
    </tr>
    <tr>
        <td>sortdir</td>
        <td>The direction of the sorting, can be 'asc' or 'desc'</td>
    </tr>
    <tr>
        <td>PAGING</td>
        <td>See above for the explanation on paging parameters</td>
    </tr>
</table>
**Example:** `http://localhost:8888/yamj3/api/index/person?max=3`

GET /api/index/person
< 200
< Content-Type: application/json
{
   "count":3,
   "totalCount":110,
   "queryDuration":"31ms",
   "queryTime":"2013-08-01 10:56:42",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "options":{
      "start":-1,
      "max":3,
      "sortby":"",
      "sortdir":"ASC",
      "id":-1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "results":[
      {
         "id":1,
         "name":"Zachary Levi",
         "biography":"Zachary Levi Pugh (born September 29, 1980), better known by his stage name Zachary Levi, ...",
         "birthDay":"1980-09-29",
         "birthPlace":"Lake Charles, Louisiana, USA",
         "birthName":null,
         "deathDay":null
      },
      {
         "id":2,
         "name":"Yvonne Strahovski",
         "biography":"Yvonne Strahovski (born Strzechowski on 30 July 1982) is an Australian actress. Born in Australia ...",
         "birthDay":"1982-07-30",
         "birthPlace":"Sydney, Australia",
         "birthName":null,
         "deathDay":null
      },
      {
         "id":3,
         "name":"Joshua Gomez",
         "biography":"Joshua Eli Gomez (born November 20, 1975, in Bayonne, New Jersey) is an American actor ...",
         "birthDay":"1975-11-20",
         "birthPlace":"Bayonne, New Jersey, USA",
         "birthName":null,
         "deathDay":null
      }
   ]
}


Get counts for various main objects in the database.
Note: These are currently fixed and are intended for system wide statistics.
For specific indexes, there will be an option to get the count for that index.
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>type</td>
        <td>The type of the count to get.<br/>
        Can be a comma separated list consisting one or more of:<br/>
        'all', 'movie', 'series', 'season', 'episode' or 'person'
        </td>
    </tr>
</table>

GET /api/index/count
< 200
< Content-Type: application/json
{
    [
   {
      "type":"MOVIE",
      "count":730,
      "createTimestamp":1372626565000,
      "updateTimestamp":1372785055000,
      "lastId":877
   },
   {
      "type":"SERIES",
      "count":6,
      "createTimestamp":1372626159000,
      "updateTimestamp":1372785325000,
      "lastId":6
   },
   {
      "type":"SEASON",
      "count":10,
      "createTimestamp":1372626160000,
      "updateTimestamp":1372785325000,
      "lastId":10
   },
   {
      "type":"EPISODE",
      "count":147,
      "createTimestamp":1372626160000,
      "updateTimestamp":1372785325000,
      "lastId":549
   },
   {
      "type":"PERSON",
      "count":9175,
      "createTimestamp":1372785318000,
      "updateTimestamp":1372795950000,
      "lastId":9175
   }
]
}


--
Video Methods
These methods get information on the videos in the database
--

Retrieve information on the video
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The id of the movie to get.<br/>
            Note: This is specific to the video type, so Movie ID 1 is not the same as Season ID 1</td>
    </tr>
</table>

**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the video.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Leave this option blank to return no artwork</td>
    </tr>
</table>

GET /api/video/movie/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"8ms",
   "queryTime":"2013-07-31 16:23:37",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":-1,
      "type":"MOVIE",
      "include":"",
      "exclude":"",
      "sortby":"",
      "sortdir":"ASC",
      "artwork":"",
      "id":34
   },
   "baseArtworkUrl":"http://141.196.102.114:8888/artwork/",
   "baseMediainfoUrl":"http://141.196.102.114:8888/mediainfo/",
   "results":[
      {
         "id":34,
         "videoType":"MOVIE",
         "title":"I, Robot",
         "originalTitle":"I Robot",
         "videoYear":2004,
         "genres":[],
         "artwork":{},
         "artworkCount":0,
         "genreCount":0
      }
   ]
}


Retrieve information on the series
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The id of the series to get.<br/>
            Note: This is specific to the video type, so Movie ID 1 is not the same as Season ID 1</td>
    </tr>
</table>

**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the video.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Leave this option blank to return no artwork</td>
    </tr>
</table>

GET /api/video/series/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"7ms",
   "queryTime":"2013-07-31 16:29:10",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":-1,
      "type":"SERIES",
      "include":"",
      "exclude":"",
      "sortby":"",
      "sortdir":"ASC",
      "artwork":"",
      "id":1
   },
   "baseArtworkUrl":"http://141.196.102.114:8888/artwork/",
   "baseMediainfoUrl":"http://141.196.102.114:8888/mediainfo/",
   "results":[
      {
         "id":1,
         "videoType":"SERIES",
         "title":"Game of Thrones",
         "originalTitle":"Game of Thrones",
         "videoYear":2011,
         "genres":[],
         "artwork":{},
         "artworkCount":0,
         "genreCount":0
      }
   ]
}

Retrieve information on the season
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The id of the season to get.<br/>
            Note: This is specific to the video type, so Movie ID 1 is not the same as Season ID 1</td>
    </tr>
</table>

**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>artwork</td>
        <td>The list of artwork types to get for the video.<br/>
            Can be one or more of: 'ALL', 'POSTER', 'FANART', 'BANNER', 'VIDEOIMAGE', etc.<br/>
            Leave this option blank to return no artwork</td>
    </tr>
</table>

GET /api/video/season/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"5ms",
   "queryTime":"2013-07-31 16:28:54",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":-1,
      "type":"SEASON",
      "include":"",
      "exclude":"",
      "sortby":"",
      "sortdir":"ASC",
      "artwork":"",
      "id":1
   },
   "baseArtworkUrl":"http://141.196.102.114:8888/artwork/",
   "baseMediainfoUrl":"http://141.196.102.114:8888/mediainfo/",
   "results":[
      {
         "id":1,
         "videoType":"SEASON",
         "title":"Game of Thrones",
         "originalTitle":"Game of Thrones",
         "videoYear":2011,
         "genres":[],
         "artwork":{},
         "artworkCount":0,
         "genreCount":0
      }
   ]
}


--
Artwork
--

Get information on the artwork
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>This is the ID of the artwork to fetch.<br>
        It will retrieve all the artwork generated for that ID</td>
    </tr>
</table>

GET /api/artwork/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"6ms",
   "queryTime":"2013-07-31 09:12:07",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "result":{
      "source":"SEASON",
      "videoId":1,
      "artworkId":5,
      "locatedId":21,
      "generatedId":21,
      "artworkType":"FANART",
      "filename":"g/ga/Game of Thrones_0000_001.season.fanart.21.default-fanart.jpg"
   }
}

Get a list of artwork
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>artwork</td>
        <td>The type of artwork to search for. Can be a comma delimited list of any of the artwork types.</td>
    </tr>
    <tr>
        <td>video</td>
        <td>The type of video to search for. Can be one of video, series, season. <br>
        Can be used in conjunction with the id parameter to narrow the artwork list to a specific video.</td>
    </tr>
    <tr>
        <td>id</td>
        <td>The id of the video/series/season to search for.</td>
    </tr>
    <tr>
        <td>start</td>
        <td>Where to start the search from. Default is 0 (beginning)</td>
    </tr>
    <tr>
        <td>max</td>
        <td>The maximum number of records to return. Default is 0 (all)</td>
    </tr>
</table>

GET /api/artwork/list
< 200
< Content-Type: application/json
{
   "count":5,
   "totalCount":199,
   "queryDuration":"63ms",
   "queryTime":"2013-07-31 09:09:50",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "start":-1,
      "max":5,
      "artwork":[],
      "video":[],
      "id":-1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "results":[
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":1,
         "generatedId":1,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.1.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":2,
         "generatedId":2,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.2.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":3,
         "generatedId":3,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.3.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":4,
         "generatedId":4,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.4.default-poster.jpg"
      },
      {
         "source":"SERIES",
         "videoId":1,
         "artworkId":1,
         "locatedId":5,
         "generatedId":5,
         "artworkType":"POSTER",
         "filename":"g/ga/Game of Thrones_0000.series.poster.5.default-poster.jpg"
      }
   ]
}


--
Person
--

Get information on the person
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>This is the ID of the person to fetch.</td>
    </tr>
</table>
**Example:** `http://localhost:8888/yamj3/api/person/1`

GET /api/person/{id}
< 200
< Content-Type: application/json
{
   "count":1,
   "totalCount":1,
   "queryDuration":"15ms",
   "queryTime":"2013-08-01 11:08:58",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "options":{
      "start":-1,
      "max":-1,
      "sortby":"",
      "sortdir":"ASC",
      "id":1
   },
   "baseArtworkUrl":"http://192.168.1.34:8888/artwork/",
   "baseMediainfoUrl":"http://192.168.1.34:8888/mediainfo/",
   "result":{
      "id":1,
      "name":"Zachary Levi",
      "biography":"Zachary Levi Pugh (born September 29, 1980), better known by his stage name Zachary Levi ...",
      "birthDay":"1980-09-29",
      "birthPlace":"Lake Charles, Louisiana, USA",
      "birthName":null,
      "deathDay":null
   }
}


--
Other
--

Mark a video file as watched with an optional percentage
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>filename</td>
        <td>The filename of the video to mark as watched</td>
    </tr>
</table>

**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>watched</td>
        <td>A percentage value that the video has been watched</td>
    </tr>
</table>

GET /api/watched
< 200
< Content-Type: application/json
{}


Get information on a single genre
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the genre to get</td>
    </tr>
    <tr>
        <td>name</td>
        <td>The name of the genre to get</td>
    </tr>
</table>

GET /api/genre/{id_or_name}
< 200
< Content-Type: application/json
{
   "count":1,
   "queryTime":"2013-06-08 19:04:34",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "parameters":{}
   },
   "result":{
      "id":1,
      "name":"Foreign"
   }
}


Get information on the genres associated with a filename
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>filename</td>
        <td>The filename to get the list of genres for</td>
    </tr>
</table>

GET /api/genre
< 200
< Content-Type: application/json
{
   "count":4,
   "totalCount":4,
   "queryDuration":"78ms",
   "queryTime":"2013-07-29 21:51:24",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":null,
   "baseArtworkUrl":"",
   "baseMediainfoUrl":"",
   "results":[
      {
         "id":1,
         "name":"Science Fiction"
      },
      {
         "id":2,
         "name":"Adventure"
      },
      {
         "id":3,
         "name":"Action"
      },
      {
         "id":4,
         "name":"Thriller"
      }
   ]
}


Get information genres
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>search</td>
        <td>The search term to use</td>
    </tr>
    <tr>
        <td>match</td>
        <td>The match method. Can be one of `any` (default), `start`, `end` or `exact`</td>
    </tr>
    <tr>
        <td>sort</td>
        <td>Sort the returned results. Can be one of `asc` or `desc`</td>
    </tr>
    <tr>
        <td>start</td>
        <td>Where to start the list from</td>
    </tr>
    <tr>
        <td>max</td>
        <td>The maximum number of results to return</td>
    </tr>
</table>

GET /api/genres
< 200
< Content-Type: application/json
{
   "count":4,
   "queryTime":"2013-06-08 19:06:12",
   "status":{
      "status":200,
      "message":"OK"
   },
   "parameters":{
      "parameters":{
         "SEARCH":"d",
         "SEARCH_FIELD":"name",
         "MATCHMODE":"any",
         "SORT_FIELD":"name"
      }
   },
   "results":[
      {
         "id":2,
         "name":"Comedy"
      },
      {
         "id":3,
         "name":"Drama"
      },
      {
         "id":5,
         "name":"Holiday"
      },
      {
         "id":9,
         "name":"Adventure"
      }
   ]
}


Get information on a single certification
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the certificate to get</td>
    </tr>
    <tr>
        <td>name</td>
        <td>The name of the certificate to get</td>
    </tr>
</table>

GET /api/certificate/{id_or_name}
< 200
< Content-Type: application/json
{}


Get information certifications
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>search</td>
        <td>The search term to use</td>
    </tr>
    <tr>
        <td>match</td>
        <td>The match method. Can be one of `any` (default), `start`, `end` or `exact`</td>
    </tr>
    <tr>
        <td>sort</td>
        <td>Sort the returned results. Can be one of `asc` or `desc`</td>
    </tr>
    <tr>
        <td>start</td>
        <td>Where to start the list from</td>
    </tr>
    <tr>
        <td>max</td>
        <td>The maximum number of results to return</td>
    </tr>
</table>

GET /api/certifications
< 200
< Content-Type: application/json
{}


Get information on a single studio
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the studio to get</td>
    </tr>
    <tr>
        <td>name</td>
        <td>The name of the studio to get</td>
    </tr>
</table>

GET /api/studio/{id_or_name}
< 200
< Content-Type: application/json
{}


Get information studios
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>search</td>
        <td>The search term to use</td>
    </tr>
    <tr>
        <td>match</td>
        <td>The match method. Can be one of `any` (default), `start`, `end` or `exact`</td>
    </tr>
    <tr>
        <td>sort</td>
        <td>Sort the returned results. Can be one of `asc` or `desc`</td>
    </tr>
    <tr>
        <td>start</td>
        <td>Where to start the list from</td>
    </tr>
    <tr>
        <td>max</td>
        <td>The maximum number of results to return</td>
    </tr>
</table>

GET /api/studios
< 200
< Content-Type: application/json
{}


Get information on a single boxed set
***
**Required Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>id</td>
        <td>The ID of the boxed set to get</td>
    </tr>
    <tr>
        <td>name</td>
        <td>The name of the boxed set to get</td>
    </tr>
</table>

GET /api/boxedset/{id_or_name}
< 200
< Content-Type: application/json
{}


Get information boxed sets
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>search</td>
        <td>The search term to use</td>
    </tr>
    <tr>
        <td>match</td>
        <td>The match method. Can be one of `any` (default), `start`, `end` or `exact`</td>
    </tr>
    <tr>
        <td>sort</td>
        <td>Sort the returned results. Can be one of `asc` or `desc`</td>
    </tr>
    <tr>
        <td>start</td>
        <td>Where to start the list from</td>
    </tr>
    <tr>
        <td>max</td>
        <td>The maximum number of results to return</td>
    </tr>
</table>

GET /api/boxedsets
< 200
< Content-Type: application/json
{}


--
System Information
This API returns information about the state of the YAMJ Core.
--

Get a simple text response with the uptime of the core.

This is not intended to be consumed programmatically, it is intended to provide a "ping" types response for checking that the core is running.
GET /system
< 200
< Content-Type: text
{YAMJ v3 is running, uptime 1h07m20.198s}


Get information on the system
***
**Optional Parameters**

<table width="100%">
    <col width="20%">
    <col width="80%">
    <tr>
        <td>addcounts</td>
        <td>set to 'true' if you want a count of the major objects in the database, such as Movies, People, etc.</td>
    </tr>
</table>

GET /system/info
< 200
< Content-Type: application/json
{
   "projectName":"Yet Another Movie Jukebox",
   "projectVersion":"3.0-SNAPSHOT",
   "moduleName":"YAMJ3 Core",
   "moduleDescription":"Core of YAMJ project",
   "buildRevision":"a78abfc3c4",
   "processorCores":8,
   "javaVersion":"1.7.0_25",
   "osArch":"amd64",
   "osName":"Windows 7",
   "osVersion":"6.1",
   "counts":{
      "MOVIE":730,
      "SERIES":6,
      "SEASON":10,
      "EPISODE":147,
      "PERSON":9175
   },
   "uptime":"21m15.046s",
   "startUpTime":"2013-07-03 18:31:39",
   "buildDate":"2013-07-03 18:30:51"
}
